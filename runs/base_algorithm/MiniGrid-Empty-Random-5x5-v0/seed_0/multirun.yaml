hydra:
  run:
    dir: ${output_dir}/${experiment_name}_${seed}
  sweep:
    dir: ${output_dir}/${experiment_name}_${seed}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(purple)sHYDRA%(reset)s] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
      colorlog:
        (): colorlog.ColoredFormatter
        format: '[%(cyan)s%(asctime)s%(reset)s][%(blue)s%(name)s%(reset)s][%(log_color)s%(levelname)s%(reset)s]
          - %(message)s'
        log_colors:
          DEBUG: purple
          INFO: green
          WARNING: yellow
          ERROR: red
          CRITICAL: red
    handlers:
      console:
        class: logging.StreamHandler
        formatter: colorlog
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - environment=contextual_minigrid
    - env=MiniGrid-Empty-Random-5x5-v0
    - seed=0,1,2,3,4
  job:
    name: run_mighty
    chdir: null
    override_dirname: env=MiniGrid-Empty-Random-5x5-v0,environment=contextual_minigrid,seed=0,1,2,3,4
    id: ???
    num: ???
    config_name: base
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /Users/theeimer/Documents/git/mighty_dr_example
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /Users/theeimer/Documents/git/mighty_dr_example/mighty_domain_randomization/configs
      schema: file
      provider: main
    - path: hydra_plugins.hydra_colorlog.conf
      schema: pkg
      provider: hydra-colorlog
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      search_space: ppo
      environment: contextual_minigrid
      algorithm: ppo
      cluster: local
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: colorlog
      hydra/hydra_logging: colorlog
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
runner: standard
debug: false
seed: 0
output_dir: runs
wandb_project: null
tensorboard_file: null
experiment_name: base_algorithm/${env}/seed
algorithm_kwargs:
  n_policy_units: 8
  n_critic_units: 8
  soft_update_weight: 0.01
  rollout_buffer_class:
    _target_: mighty.mighty_replay.MightyRolloutBuffer
  rollout_buffer_kwargs:
    buffer_size: 2048
    gamma: 0.99
    gae_lambda: 0.95
    obs_shape: ???
    act_dim: ???
    n_envs: ???
    discrete_action: ???
  learning_rate: 0.001
  batch_size: 10000
  gamma: 0.99
  n_gradient_steps: 10
  ppo_clip: 0.2
  value_loss_coef: 0.5
  entropy_coef: 0.01
  max_grad_norm: 0.5
  policy_class: mighty.mighty_exploration.StochasticPolicy
  policy_kwargs:
    entropy_coefficient: 0.2
eval_every_n_steps: 10000.0
n_episodes_eval: 10
checkpoint: null
save_model_every_n_steps: 500000.0
cluster: {}
algorithm: PPO
num_steps: 100000.0
env: MiniGrid-Empty-Random-5x5-v0
env_kwargs: {}
env_wrappers:
- mighty_domain_randomization.env_task_wrappers.VecMinigridTaskWrapper
num_envs: 64
search_space:
  hyperparameters:
    algorithm_kwargs.learning_rate:
      type: uniform_float
      lower: 1.0e-05
      upper: 0.001
      log: true
    algorithm_kwargs.batch_size:
      type: categorical
      choices:
      - 8
      - 16
      - 32
      - 64
      - 128
      - 256
      - 512
    algorithm_kwargs.n_gradient_steps:
      type: uniform_int
      lower: 1
      upper: 20
      log: false
    algorithm_kwargs.gamma:
      type: uniform_float
      lower: 0.9
      upper: 0.9999
      log: false
    algorithm_kwargs.ppo_clip:
      type: uniform_float
      lower: 0.1
      upper: 0.3
      log: false
    algorithm_kwargs.value_loss_coef:
      type: uniform_float
      lower: 0.1
      upper: 1.0
      log: false
    algorithm_kwargs.entropy_coef:
      type: uniform_float
      lower: 0.0
      upper: 0.1
      log: false
    algorithm_kwargs.max_grad_norm:
      type: uniform_float
      lower: 0.1
      upper: 1.0
      log: false
